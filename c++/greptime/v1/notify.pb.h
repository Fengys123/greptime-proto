// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: greptime/v1/notify.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fnotify_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fnotify_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021006 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_greptime_2fv1_2fnotify_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_greptime_2fv1_2fnotify_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_greptime_2fv1_2fnotify_2eproto;
namespace greptime {
namespace v1 {
class NotificationRequest;
struct NotificationRequestDefaultTypeInternal;
extern NotificationRequestDefaultTypeInternal _NotificationRequest_default_instance_;
class NotificationResponse;
struct NotificationResponseDefaultTypeInternal;
extern NotificationResponseDefaultTypeInternal _NotificationResponse_default_instance_;
}  // namespace v1
}  // namespace greptime
PROTOBUF_NAMESPACE_OPEN
template<> ::greptime::v1::NotificationRequest* Arena::CreateMaybeMessage<::greptime::v1::NotificationRequest>(Arena*);
template<> ::greptime::v1::NotificationResponse* Arena::CreateMaybeMessage<::greptime::v1::NotificationResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace greptime {
namespace v1 {

// ===================================================================

class NotificationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.NotificationRequest) */ {
 public:
  inline NotificationRequest() : NotificationRequest(nullptr) {}
  ~NotificationRequest() override;
  explicit PROTOBUF_CONSTEXPR NotificationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationRequest(const NotificationRequest& from);
  NotificationRequest(NotificationRequest&& from) noexcept
    : NotificationRequest() {
    *this = ::std::move(from);
  }

  inline NotificationRequest& operator=(const NotificationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationRequest& operator=(NotificationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationRequest* internal_default_instance() {
    return reinterpret_cast<const NotificationRequest*>(
               &_NotificationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotificationRequest& a, NotificationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationRequest& from) {
    NotificationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.NotificationRequest";
  }
  protected:
  explicit NotificationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCatalogNameFieldNumber = 1,
    kSchemaNameFieldNumber = 2,
    kTableNameFieldNumber = 3,
    kBackedFilePathFieldNumber = 4,
    kStartOffsetFieldNumber = 5,
    kEndOffsetFieldNumber = 6,
    kCheckSumFieldNumber = 7,
  };
  // string catalog_name = 1;
  void clear_catalog_name();
  const std::string& catalog_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_catalog_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_catalog_name();
  PROTOBUF_NODISCARD std::string* release_catalog_name();
  void set_allocated_catalog_name(std::string* catalog_name);
  private:
  const std::string& _internal_catalog_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_catalog_name(const std::string& value);
  std::string* _internal_mutable_catalog_name();
  public:

  // string schema_name = 2;
  void clear_schema_name();
  const std::string& schema_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_schema_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_schema_name();
  PROTOBUF_NODISCARD std::string* release_schema_name();
  void set_allocated_schema_name(std::string* schema_name);
  private:
  const std::string& _internal_schema_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_schema_name(const std::string& value);
  std::string* _internal_mutable_schema_name();
  public:

  // string table_name = 3;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // string backed_file_path = 4;
  void clear_backed_file_path();
  const std::string& backed_file_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_backed_file_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_backed_file_path();
  PROTOBUF_NODISCARD std::string* release_backed_file_path();
  void set_allocated_backed_file_path(std::string* backed_file_path);
  private:
  const std::string& _internal_backed_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_backed_file_path(const std::string& value);
  std::string* _internal_mutable_backed_file_path();
  public:

  // uint32 start_offset = 5;
  void clear_start_offset();
  uint32_t start_offset() const;
  void set_start_offset(uint32_t value);
  private:
  uint32_t _internal_start_offset() const;
  void _internal_set_start_offset(uint32_t value);
  public:

  // uint32 end_offset = 6;
  void clear_end_offset();
  uint32_t end_offset() const;
  void set_end_offset(uint32_t value);
  private:
  uint32_t _internal_end_offset() const;
  void _internal_set_end_offset(uint32_t value);
  public:

  // uint32 check_sum = 7;
  void clear_check_sum();
  uint32_t check_sum() const;
  void set_check_sum(uint32_t value);
  private:
  uint32_t _internal_check_sum() const;
  void _internal_set_check_sum(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.NotificationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr catalog_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr schema_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr backed_file_path_;
    uint32_t start_offset_;
    uint32_t end_offset_;
    uint32_t check_sum_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fnotify_2eproto;
};
// -------------------------------------------------------------------

class NotificationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:greptime.v1.NotificationResponse) */ {
 public:
  inline NotificationResponse() : NotificationResponse(nullptr) {}
  ~NotificationResponse() override;
  explicit PROTOBUF_CONSTEXPR NotificationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotificationResponse(const NotificationResponse& from);
  NotificationResponse(NotificationResponse&& from) noexcept
    : NotificationResponse() {
    *this = ::std::move(from);
  }

  inline NotificationResponse& operator=(const NotificationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotificationResponse& operator=(NotificationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotificationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotificationResponse* internal_default_instance() {
    return reinterpret_cast<const NotificationResponse*>(
               &_NotificationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(NotificationResponse& a, NotificationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NotificationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotificationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NotificationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NotificationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NotificationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NotificationResponse& from) {
    NotificationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotificationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "greptime.v1.NotificationResponse";
  }
  protected:
  explicit NotificationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:greptime.v1.NotificationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_greptime_2fv1_2fnotify_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotificationRequest

// string catalog_name = 1;
inline void NotificationRequest::clear_catalog_name() {
  _impl_.catalog_name_.ClearToEmpty();
}
inline const std::string& NotificationRequest::catalog_name() const {
  // @@protoc_insertion_point(field_get:greptime.v1.NotificationRequest.catalog_name)
  return _internal_catalog_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationRequest::set_catalog_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.catalog_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.NotificationRequest.catalog_name)
}
inline std::string* NotificationRequest::mutable_catalog_name() {
  std::string* _s = _internal_mutable_catalog_name();
  // @@protoc_insertion_point(field_mutable:greptime.v1.NotificationRequest.catalog_name)
  return _s;
}
inline const std::string& NotificationRequest::_internal_catalog_name() const {
  return _impl_.catalog_name_.Get();
}
inline void NotificationRequest::_internal_set_catalog_name(const std::string& value) {
  
  _impl_.catalog_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationRequest::_internal_mutable_catalog_name() {
  
  return _impl_.catalog_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationRequest::release_catalog_name() {
  // @@protoc_insertion_point(field_release:greptime.v1.NotificationRequest.catalog_name)
  return _impl_.catalog_name_.Release();
}
inline void NotificationRequest::set_allocated_catalog_name(std::string* catalog_name) {
  if (catalog_name != nullptr) {
    
  } else {
    
  }
  _impl_.catalog_name_.SetAllocated(catalog_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.catalog_name_.IsDefault()) {
    _impl_.catalog_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.NotificationRequest.catalog_name)
}

// string schema_name = 2;
inline void NotificationRequest::clear_schema_name() {
  _impl_.schema_name_.ClearToEmpty();
}
inline const std::string& NotificationRequest::schema_name() const {
  // @@protoc_insertion_point(field_get:greptime.v1.NotificationRequest.schema_name)
  return _internal_schema_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationRequest::set_schema_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.schema_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.NotificationRequest.schema_name)
}
inline std::string* NotificationRequest::mutable_schema_name() {
  std::string* _s = _internal_mutable_schema_name();
  // @@protoc_insertion_point(field_mutable:greptime.v1.NotificationRequest.schema_name)
  return _s;
}
inline const std::string& NotificationRequest::_internal_schema_name() const {
  return _impl_.schema_name_.Get();
}
inline void NotificationRequest::_internal_set_schema_name(const std::string& value) {
  
  _impl_.schema_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationRequest::_internal_mutable_schema_name() {
  
  return _impl_.schema_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationRequest::release_schema_name() {
  // @@protoc_insertion_point(field_release:greptime.v1.NotificationRequest.schema_name)
  return _impl_.schema_name_.Release();
}
inline void NotificationRequest::set_allocated_schema_name(std::string* schema_name) {
  if (schema_name != nullptr) {
    
  } else {
    
  }
  _impl_.schema_name_.SetAllocated(schema_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.schema_name_.IsDefault()) {
    _impl_.schema_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.NotificationRequest.schema_name)
}

// string table_name = 3;
inline void NotificationRequest::clear_table_name() {
  _impl_.table_name_.ClearToEmpty();
}
inline const std::string& NotificationRequest::table_name() const {
  // @@protoc_insertion_point(field_get:greptime.v1.NotificationRequest.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationRequest::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.table_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.NotificationRequest.table_name)
}
inline std::string* NotificationRequest::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:greptime.v1.NotificationRequest.table_name)
  return _s;
}
inline const std::string& NotificationRequest::_internal_table_name() const {
  return _impl_.table_name_.Get();
}
inline void NotificationRequest::_internal_set_table_name(const std::string& value) {
  
  _impl_.table_name_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationRequest::_internal_mutable_table_name() {
  
  return _impl_.table_name_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:greptime.v1.NotificationRequest.table_name)
  return _impl_.table_name_.Release();
}
inline void NotificationRequest::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  _impl_.table_name_.SetAllocated(table_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.table_name_.IsDefault()) {
    _impl_.table_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.NotificationRequest.table_name)
}

// string backed_file_path = 4;
inline void NotificationRequest::clear_backed_file_path() {
  _impl_.backed_file_path_.ClearToEmpty();
}
inline const std::string& NotificationRequest::backed_file_path() const {
  // @@protoc_insertion_point(field_get:greptime.v1.NotificationRequest.backed_file_path)
  return _internal_backed_file_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotificationRequest::set_backed_file_path(ArgT0&& arg0, ArgT... args) {
 
 _impl_.backed_file_path_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:greptime.v1.NotificationRequest.backed_file_path)
}
inline std::string* NotificationRequest::mutable_backed_file_path() {
  std::string* _s = _internal_mutable_backed_file_path();
  // @@protoc_insertion_point(field_mutable:greptime.v1.NotificationRequest.backed_file_path)
  return _s;
}
inline const std::string& NotificationRequest::_internal_backed_file_path() const {
  return _impl_.backed_file_path_.Get();
}
inline void NotificationRequest::_internal_set_backed_file_path(const std::string& value) {
  
  _impl_.backed_file_path_.Set(value, GetArenaForAllocation());
}
inline std::string* NotificationRequest::_internal_mutable_backed_file_path() {
  
  return _impl_.backed_file_path_.Mutable(GetArenaForAllocation());
}
inline std::string* NotificationRequest::release_backed_file_path() {
  // @@protoc_insertion_point(field_release:greptime.v1.NotificationRequest.backed_file_path)
  return _impl_.backed_file_path_.Release();
}
inline void NotificationRequest::set_allocated_backed_file_path(std::string* backed_file_path) {
  if (backed_file_path != nullptr) {
    
  } else {
    
  }
  _impl_.backed_file_path_.SetAllocated(backed_file_path, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.backed_file_path_.IsDefault()) {
    _impl_.backed_file_path_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:greptime.v1.NotificationRequest.backed_file_path)
}

// uint32 start_offset = 5;
inline void NotificationRequest::clear_start_offset() {
  _impl_.start_offset_ = 0u;
}
inline uint32_t NotificationRequest::_internal_start_offset() const {
  return _impl_.start_offset_;
}
inline uint32_t NotificationRequest::start_offset() const {
  // @@protoc_insertion_point(field_get:greptime.v1.NotificationRequest.start_offset)
  return _internal_start_offset();
}
inline void NotificationRequest::_internal_set_start_offset(uint32_t value) {
  
  _impl_.start_offset_ = value;
}
inline void NotificationRequest::set_start_offset(uint32_t value) {
  _internal_set_start_offset(value);
  // @@protoc_insertion_point(field_set:greptime.v1.NotificationRequest.start_offset)
}

// uint32 end_offset = 6;
inline void NotificationRequest::clear_end_offset() {
  _impl_.end_offset_ = 0u;
}
inline uint32_t NotificationRequest::_internal_end_offset() const {
  return _impl_.end_offset_;
}
inline uint32_t NotificationRequest::end_offset() const {
  // @@protoc_insertion_point(field_get:greptime.v1.NotificationRequest.end_offset)
  return _internal_end_offset();
}
inline void NotificationRequest::_internal_set_end_offset(uint32_t value) {
  
  _impl_.end_offset_ = value;
}
inline void NotificationRequest::set_end_offset(uint32_t value) {
  _internal_set_end_offset(value);
  // @@protoc_insertion_point(field_set:greptime.v1.NotificationRequest.end_offset)
}

// uint32 check_sum = 7;
inline void NotificationRequest::clear_check_sum() {
  _impl_.check_sum_ = 0u;
}
inline uint32_t NotificationRequest::_internal_check_sum() const {
  return _impl_.check_sum_;
}
inline uint32_t NotificationRequest::check_sum() const {
  // @@protoc_insertion_point(field_get:greptime.v1.NotificationRequest.check_sum)
  return _internal_check_sum();
}
inline void NotificationRequest::_internal_set_check_sum(uint32_t value) {
  
  _impl_.check_sum_ = value;
}
inline void NotificationRequest::set_check_sum(uint32_t value) {
  _internal_set_check_sum(value);
  // @@protoc_insertion_point(field_set:greptime.v1.NotificationRequest.check_sum)
}

// -------------------------------------------------------------------

// NotificationResponse

// bool success = 1;
inline void NotificationResponse::clear_success() {
  _impl_.success_ = false;
}
inline bool NotificationResponse::_internal_success() const {
  return _impl_.success_;
}
inline bool NotificationResponse::success() const {
  // @@protoc_insertion_point(field_get:greptime.v1.NotificationResponse.success)
  return _internal_success();
}
inline void NotificationResponse::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void NotificationResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:greptime.v1.NotificationResponse.success)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace greptime

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_greptime_2fv1_2fnotify_2eproto
