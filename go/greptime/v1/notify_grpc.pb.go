// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: greptime/v1/notify.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShmClient is the client API for Shm service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShmClient interface {
	Notify(ctx context.Context, in *NotificationRequests, opts ...grpc.CallOption) (*NotificationResponse, error)
}

type shmClient struct {
	cc grpc.ClientConnInterface
}

func NewShmClient(cc grpc.ClientConnInterface) ShmClient {
	return &shmClient{cc}
}

func (c *shmClient) Notify(ctx context.Context, in *NotificationRequests, opts ...grpc.CallOption) (*NotificationResponse, error) {
	out := new(NotificationResponse)
	err := c.cc.Invoke(ctx, "/greptime.v1.Shm/notify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShmServer is the server API for Shm service.
// All implementations must embed UnimplementedShmServer
// for forward compatibility
type ShmServer interface {
	Notify(context.Context, *NotificationRequests) (*NotificationResponse, error)
	mustEmbedUnimplementedShmServer()
}

// UnimplementedShmServer must be embedded to have forward compatible implementations.
type UnimplementedShmServer struct {
}

func (UnimplementedShmServer) Notify(context.Context, *NotificationRequests) (*NotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedShmServer) mustEmbedUnimplementedShmServer() {}

// UnsafeShmServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShmServer will
// result in compilation errors.
type UnsafeShmServer interface {
	mustEmbedUnimplementedShmServer()
}

func RegisterShmServer(s grpc.ServiceRegistrar, srv ShmServer) {
	s.RegisterService(&Shm_ServiceDesc, srv)
}

func _Shm_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationRequests)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShmServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/greptime.v1.Shm/notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShmServer).Notify(ctx, req.(*NotificationRequests))
	}
	return interceptor(ctx, in, info, handler)
}

// Shm_ServiceDesc is the grpc.ServiceDesc for Shm service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shm_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greptime.v1.Shm",
	HandlerType: (*ShmServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "notify",
			Handler:    _Shm_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "greptime/v1/notify.proto",
}
