// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: greptime/v1/meta/frontend_heartbeat.proto

package meta

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrontendHeartbeatClient is the client API for FrontendHeartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrontendHeartbeatClient interface {
	FrontendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (FrontendHeartbeat_FrontendHeartbeatClient, error)
}

type frontendHeartbeatClient struct {
	cc grpc.ClientConnInterface
}

func NewFrontendHeartbeatClient(cc grpc.ClientConnInterface) FrontendHeartbeatClient {
	return &frontendHeartbeatClient{cc}
}

func (c *frontendHeartbeatClient) FrontendHeartbeat(ctx context.Context, opts ...grpc.CallOption) (FrontendHeartbeat_FrontendHeartbeatClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrontendHeartbeat_ServiceDesc.Streams[0], "/greptime.v1.meta.FrontendHeartbeat/FrontendHeartbeat", opts...)
	if err != nil {
		return nil, err
	}
	x := &frontendHeartbeatFrontendHeartbeatClient{stream}
	return x, nil
}

type FrontendHeartbeat_FrontendHeartbeatClient interface {
	Send(*FrontendHeartbeatRequest) error
	Recv() (*FrontendHeartbeatResponse, error)
	grpc.ClientStream
}

type frontendHeartbeatFrontendHeartbeatClient struct {
	grpc.ClientStream
}

func (x *frontendHeartbeatFrontendHeartbeatClient) Send(m *FrontendHeartbeatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frontendHeartbeatFrontendHeartbeatClient) Recv() (*FrontendHeartbeatResponse, error) {
	m := new(FrontendHeartbeatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrontendHeartbeatServer is the server API for FrontendHeartbeat service.
// All implementations must embed UnimplementedFrontendHeartbeatServer
// for forward compatibility
type FrontendHeartbeatServer interface {
	FrontendHeartbeat(FrontendHeartbeat_FrontendHeartbeatServer) error
	mustEmbedUnimplementedFrontendHeartbeatServer()
}

// UnimplementedFrontendHeartbeatServer must be embedded to have forward compatible implementations.
type UnimplementedFrontendHeartbeatServer struct {
}

func (UnimplementedFrontendHeartbeatServer) FrontendHeartbeat(FrontendHeartbeat_FrontendHeartbeatServer) error {
	return status.Errorf(codes.Unimplemented, "method FrontendHeartbeat not implemented")
}
func (UnimplementedFrontendHeartbeatServer) mustEmbedUnimplementedFrontendHeartbeatServer() {}

// UnsafeFrontendHeartbeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrontendHeartbeatServer will
// result in compilation errors.
type UnsafeFrontendHeartbeatServer interface {
	mustEmbedUnimplementedFrontendHeartbeatServer()
}

func RegisterFrontendHeartbeatServer(s grpc.ServiceRegistrar, srv FrontendHeartbeatServer) {
	s.RegisterService(&FrontendHeartbeat_ServiceDesc, srv)
}

func _FrontendHeartbeat_FrontendHeartbeat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrontendHeartbeatServer).FrontendHeartbeat(&frontendHeartbeatFrontendHeartbeatServer{stream})
}

type FrontendHeartbeat_FrontendHeartbeatServer interface {
	Send(*FrontendHeartbeatResponse) error
	Recv() (*FrontendHeartbeatRequest, error)
	grpc.ServerStream
}

type frontendHeartbeatFrontendHeartbeatServer struct {
	grpc.ServerStream
}

func (x *frontendHeartbeatFrontendHeartbeatServer) Send(m *FrontendHeartbeatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frontendHeartbeatFrontendHeartbeatServer) Recv() (*FrontendHeartbeatRequest, error) {
	m := new(FrontendHeartbeatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrontendHeartbeat_ServiceDesc is the grpc.ServiceDesc for FrontendHeartbeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrontendHeartbeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greptime.v1.meta.FrontendHeartbeat",
	HandlerType: (*FrontendHeartbeatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FrontendHeartbeat",
			Handler:       _FrontendHeartbeat_FrontendHeartbeat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "greptime/v1/meta/frontend_heartbeat.proto",
}
